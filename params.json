{"name":"Typhon","body":"Typhon is twisted Python.  \r\n======\r\n\r\n\r\n  <img src=\"https://raw.github.com/vic/typhon/master/etc/typhon-logo.png\" title=\"Typhon is twisted Python\" />\r\n\r\n\r\n  A Python implementation for the Rubinius VM.\r\n\r\nWhy?\r\n----\r\n\r\nJust For Fun!.\r\n\r\nPython is one of the most popular dynamic languagues out there,\r\nit has many projects made on it and has an outstanding number of\r\nlibraries available.\r\nSo I guess having an implementation for it on Rubinius would make\r\nRubinius an strong player on VM field.\r\n\r\nAlso, the Rubinius VM is a very neat piece of software, and all\r\nthe cool kids are using it to implement other languages besides\r\nruby.\r\n\r\nMaybe Rubinius VM does what Parrot was originally intended to.\r\n( Running many dynamic languages )\r\n\r\n## Requirements\r\n\r\n  - python 2\r\n  - rubinius head\r\n  - rake\r\n\r\n## Try it\r\n\r\n     # Set rubinius as your current ruby.\r\n     $ rvm use rbx\r\n\r\n     # Get usage help\r\n     $ ./bin/typhon --help\r\n\r\n     # Run the hello world example\r\n     $ ./bin/typhon examples/hello.py\r\n\r\n     # If you want to run all the specs\r\n     $ rake spec\r\n\r\n     # Try -C --print-all on your python script.\r\n     # This will most likely blow up and show you\r\n     # a hint of what is needed to be implemented.\r\n     $ ./bin/typhon -C --print-all your_script.py\r\n\r\n     # You can use the --print-all switches with\r\n     # the REPL like this:\r\n     $ ./bin/typhon --print-all\r\n\r\n\r\n## Status\r\n\r\n  We have many simple python programs in the examples/ directory\r\n  that run successfully. Of course there might be a lot of things\r\n  missing, but that's were we need your help. Add an example, report\r\n  an issue, or even better, submit a patch or pull request.\r\n\r\n## Roadmap\r\n\r\nHere's the plan as its currently in my head:\r\n\r\n- Have a script to use Python compiler module and let it\r\n produce a sexp made of Ruby literals.\r\n\r\n  DONE.\r\n\r\n  bin/pyparse.py takes a Python script and outputs the AST as\r\n  an array of ruby literals. The table of nodes and its attributes\r\n  are read from bin/node.py. The output is just a sexp.\r\n\r\n- Read this sexp from Ruby and build an AST in Ruby land.\r\n\r\n  DONE.\r\n\r\n  rbx/ast/node.rb Typhon::AST.from_sexp takes the sexp and just\r\n  creates a tree of Python AST nodes in Ruby land. The table of\r\n  nodes is the same pyparse.py uses, bin/node.py\r\n\r\n\r\n- Write the Typhon compiler in Ruby, taking advantage of\r\n Rubinius' compiler infrastructure.\r\n\r\n  DONE.\r\n\r\n  We have Rubinius compiler stages at rbx/compiler/stages.rb\r\n  Currently the parsing stage simply uses pyparse.py and\r\n  evals the resulting sexp to later convert it to actual AST\r\n  node instances.\r\n\r\n- Have the Typhon compiler produce Rubinius bytecode.\r\n\r\n  IN PROGRESS.\r\n\r\n  We add bytecode methods to AST nodes as they are being used.\r\n\r\n- Lots of tests.\r\n\r\n  IN PROGRESS.\r\n\r\n  Currently we use the scripts from examples/ directory to test\r\n  that `typhon` and `python` programs produce the same output.\r\n\r\n  Try running the example specs with\r\n\r\n    $ mspec spec/examples_spec.rb\r\n\r\n  Of course we need more specs without having to rely on stdout\r\n  output. We're into it. Anyways ensuring all the files under\r\n  examples/ work is always a good-thing(tm).\r\n\r\n- Investigate if the pypy project has a Python parser in Python,\r\n  if so, we could use that once we compile python programs\r\n  to replace the bin/pyparse.py script.\r\n\r\n- Bootstrap. write the Typhon compiler in Python.\r\n\r\n## Contributing\r\n\r\nMain repository is located at [http://github.com/vic/typhon](http://github.com/vic/typhon)\r\nreport any issues you find there.\r\n\r\nThe Typhon developers hang out in the\r\n[#typhon-rbx](irc://irc.freenode.net/typhon-rbx) IRC channel on\r\n[freenode](http://webchat.freenode.net?nick=snake%23%23%23%23&channels=typhon-rbx)\r\nnetwork.\r\nIf more people gets interested we might start a mailing-list.\r\n\r\nTyphon is on its early days, if you want to help, you're more than welcome.\r\nWe follow the same commit bit policy than Rubinius and Pugs, if you get your first patch\r\naccepted you get commit bit.\r\n\r\n## Coding conventions.\r\n\r\nSet your editor to use soft-tabs at two spaces for ruby code, no\r\nhard-tabs for python code.\r\nConfigure your editor to automatically remove trailing whitespace and\r\nbe sure to leave an empty new-line at the end of file.\r\n\r\nTry keep source code as readable as possible, that is, use proper\r\nindentation, an empty new-line between method definitions, skip parens in ruby\r\nwhere it makes sense (most if expressions), add source comments with\r\nlinks to python design/algorithm documents if applicable, add\r\nTODO/FIXME tags if needed.\r\n\r\n## Logo\r\n\r\nThe Typhon logo has been kindly contributed by Christoph Grabo.\r\nThe logo is a derived work of the original Python logo and is \r\ndistributed under a creative common license CC BY-NC-SA 3.0.\r\n\r\n## About Typhon\r\n\r\n  The name was chosen as an anagram of Python.\r\n\r\n  In greek mithology, [Typhon](http://felc.gdufs.edu.cn/jth/myth/Greek%20Online/Typhon.htm) is one of the largest and most fearsome of all creatures.\r\n\r\n  Theres a cool t-shirt showing what Typhon is all about:\r\n  [snakes on rbx-head](http://twinsrpnt.com/blog/?p=180)\r\n\r\n## License\r\n\r\n  Modified BSD License. See LICENSE file.\r\n\r\n## Contributors\r\n\r\n  - Christoph Grabo\r\n  - Graham Batty\r\n  - Thiago Avelino\r\n  - Victor Hugo Borja <vic.borja@gmail.com>  \r\n","tagline":"Snakes on rbx-head. A Python implementation for the Rubinius VM","google":"UA-30488676-1","note":"Don't delete this file! It's used internally to help with page regeneration."}